[comment encoding = UTF-8 /]
[module toLtlInv('http://simplepdl')]


[template public generateToLtlInv(aProcess : Process)]
[comment @main/]
[file (aProcess.name.concat('_invariants.ltl'), false, 'UTF-8')]
[for (wd : WorkDefinition | aProcess.processelement -> getWDs())]
['['/][']'/] ([wd.name.concat('_notStarted')/] \/ [wd.name.concat('_started')/]);
[/for]

[for (wd : WorkDefinition | aProcess.processelement -> getWDs())]
['['/][']'/] ([wd.name.concat('_notStarted')/] \/ [wd.name.concat('_inProgress')/] \/ [wd.name.concat('_finished')/]);
[/for]

[for (wd : WorkDefinition | aProcess.processelement -> getWDs())]
[wd.name.concat('_finished')/] => ['['/][']'/] [wd.name.concat('_finished')/];
[/for]

[for (wd : WorkDefinition | aProcess.processelement -> getWDs())]
[wd.name.concat('_notStarted')/] => () ([wd.name.concat('_notStarted')/] \/ ([wd.name.concat('_started')/] /\ [wd.name.concat('_inProgress')/]));
[/for]

[for (wd : WorkDefinition | aProcess.processelement -> getWDs()) separator ('\n')]
[wd.name.concat('_inProgress')/] => () ([wd.name.concat('_finished')/] \/ [wd.name.concat('_inProgress')/] );
[/for]

[/file]
[/template]

[query public getWDs(elements : OrderedSet(ProcessElement)) : OrderedSet(WorkDefinition) =
	elements -> select( e | e.oclIsKindOf(WorkDefinition) )
			-> collect( e | e.oclAsType(WorkDefinition) )
			-> asOrderedSet()
/]

[query public getWSs(elements : OrderedSet(ProcessElement)) : OrderedSet(WorkSequence) =
	elements -> select( e | e.oclIsKindOf(WorkSequence) )
			-> collect( e | e.oclAsType(WorkSequence) )
			-> asOrderedSet()
/]