module SimplePDL2PetriNet;
create OUT: petrinet from  IN: simplepdl;

-- Obtenir le processus qui contient ce process element.
-- Remarque: Ce helper ne serait pas utile si une r�f�rence opposite
-- avait �t� plac�e entre Process et ProcessElement
helper context simplepdl!ProcessElement
def: getProcess(): simplepdl!Process =
	simplepdl!Process.allInstances()
		->select(p | p.processelement->includes(self))
		->asSequence()->first();

-- Traduire un Process en un PetriNet de m�me nom
rule Process2PetriNet {
	from p: simplepdl!Process
	to pn: petrinet!PetriNet (name <- p.name)
	do {
		pn.petrinetelement <- petrinet!Place.allInstances() -> union(petrinet!Transition.allInstances() -> union(petrinet!Arc.allInstances()));
	}
}

-- Traduire une WorkDefinition en un motif sur le réseau de Petri
rule WorkDefinition2PetriNet {
	from wd: simplepdl!WorkDefinition
	to
		-- PLACES d'une WorkDefinition
		p_notStarted: petrinet!Place(
				name <- wd.name + '_notStarted',
				marking <- 1),
		p_started: petrinet!Place(
				name <- wd.name + '_started',
				marking <- 0),
		p_inProgress: petrinet!Place(
				name <- wd.name + '_inProgress',
				marking <- 0),
		p_finished: petrinet!Place(
				name <- wd.name + '_finished',
				marking <- 0),
		-- TRANSITIONS
		t_start: petrinet!Transition(
				name <- wd.name + '_start'),
		t_finish: petrinet!Transition(
				name <- wd.name + '_finish'),
		-- ARCS
		a_notStartedToStart: petrinet!Arc(
				readOnly <- false,
				tokensNb <- 1,
				predecessor <- p_notStarted,
				successor <- t_start),
		a_startToStarted: petrinet!Arc(
				readOnly <- false,
				tokensNb <- 1,
				predecessor <- t_start,
				successor <- p_started),
		a_startToInProgress: petrinet!Arc(
				readOnly <- false,
				tokensNb <- 1,
				predecessor <- t_start,
				successor <- p_inProgress),
		a_inProgressToFinish: petrinet!Arc(
				readOnly <- false,
				tokensNb <- 1,
				predecessor <- p_inProgress,
				successor <- t_finish),
		a_finishTofinished: petrinet!Arc(
				readOnly <- false,
				tokensNb <- 1,
				predecessor <- t_finish,
				successor <- p_finished)	
}
-- Traduire une WorkSequence en un motif sur le réseau de Petri
rule WorkSequence2PetriNet {
	from ws: simplepdl!WorkSequence
	to
		a_ws: petrinet!Arc(
				readOnly <- true,
				tokensNb <- 1,
				predecessor <- thisModule.resolveTemp(ws.predecessor,
					if((ws.linkType = #finishToStart) or (ws.linkType = #finishToFinish))
						then 'p_finished'
						else 'p_started'
					endif),
				successor <- thisModule.resolveTemp(ws.successor,
					if((ws.linkType = #finishToStart) or (ws.linkType = #startToStart))
						then 't_start'
						else 't_finish'
					endif)
				)
}


-- Traduire une Ressource en un motif sur le réseau de Petri
rule Ressource2PetriNet {
	from ressource: simplepdl!Ressource
	to
		p_ressource: petrinet!Place(
				name <- ressource.nom,
				marking <- ressource.quantite,
				petriNet <- ressource.getProcess())
}

-- Traduire un besoin (Besoin) en un motif sur le réseau de Petri
rule Besoin2PetriNet {
	from besoin: simplepdl!Besoin
	to
		a_take: petrinet!Arc(
				petriNet <- besoin.getProcess(),
				readOnly <- false,
				tokensNb <- besoin.quantite,
				predecessor <- besoin.ressource,
				successor <- thisModule.resolveTemp(besoin.eContainer().workDefinition,'t_start')),
		a_return: petrinet!Arc(
				petriNet <- besoin.getProcess(),
				readOnly <- false,
				tokensNb <- besoin.quantite,
				predecessor <- thisModule.resolveTemp(besoin.eContainer().workDefinition,'t_finish'),
				successor <- besoin.ressource)
}